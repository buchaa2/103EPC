
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a45  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000538  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a55  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  000096bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000097b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000022d  00000000  00000000  000097ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c0       	rjmp	.+280    	; 0x12a <__vector_4>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
  92:	00 00       	nop
  94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
  96:	00 00       	nop
  98:	1d c0       	rjmp	.+58     	; 0xd4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	19 c0       	rjmp	.+50     	; 0xd4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	15 c0       	rjmp	.+42     	; 0xd4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	13 c0       	rjmp	.+38     	; 0xd4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	02 d0       	rcall	.+4      	; 0xd6 <main>
  d2:	9c c0       	rjmp	.+312    	; 0x20c <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <main>:

volatile unsigned int ADC_Val;			// variable for the value of the ADC
int flag = 0;							// used in the interrupt to toggle 

int main(void){
	DDRB |= (1<<PB1)|(1<<PB5);		//PB1 and PB5 are outputs
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	82 62       	ori	r24, 0x22	; 34
  da:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;						//port c is an input
  dc:	17 b8       	out	0x07, r1	; 7
	PORTB = 0;						//port b is set to low
  de:	15 b8       	out	0x05, r1	; 5
	PORTC |= (1<<PC1);				//pc1 is set to high
  e0:	41 9a       	sbi	0x08, 1	; 8
	
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);	// we are usingFast PWM, Non-inverted mode
  e2:	e0 e8       	ldi	r30, 0x80	; 128
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 6a       	ori	r24, 0xA2	; 162
  ea:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);		// Pre-scaler is set to 8
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8a 61       	ori	r24, 0x1A	; 26
  f4:	80 83       	st	Z, r24
	ICR1 = 9999;									// Top of timer1 set to 9999
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	97 e2       	ldi	r25, 0x27	; 39
  fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	PCICR = (1<<PCIE1);		//Enable PCINT
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1<<PCINT9);   //Set interrupt for PC1
 108:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	
	ADMUX = (1<<REFS0);												// the input for ADC is pc0
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// enable ADC, system clock used for ADC
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	87 68       	ori	r24, 0x87	; 135
 11a:	80 83       	st	Z, r24
	ADCSRB = 0x0;													// free running mode
 11c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	DIDR0 = 0x1;													// Filter out any digital signals
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	sei();			//Enable interrupt
 126:	78 94       	sei
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x52>

0000012a <__vector_4>:
	while (1);		//wait for interrupt
}


//ISR for PC1
ISR(PCINT1_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <__vector_4+0x24>
 156:	00 c0       	rjmp	.+0      	; 0x158 <__vector_4+0x2e>
 158:	00 00       	nop
	_delay_ms(500);	
	if(!(PINC & (1 << PINC1))){
 15a:	31 9b       	sbis	0x06, 1	; 6
 15c:	36 c0       	rjmp	.+108    	; 0x1ca <__vector_4+0xa0>
 15e:	47 c0       	rjmp	.+142    	; 0x1ee <__vector_4+0xc4>
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	31 f5       	brne	.+76     	; 0x1ba <__vector_4+0x90>
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	82 62       	ori	r24, 0x22	; 34
 172:	85 b9       	out	0x05, r24	; 5
				ADCSRA |= (1 << ADSC);				// start conversion
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
 17a:	80 81       	ld	r24, Z
 17c:	84 fd       	sbrc	r24, 4
 17e:	2b c0       	rjmp	.+86     	; 0x1d6 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;		// we only need first 10 bits
 180:	88 81       	ld	r24, Y
 182:	99 81       	ldd	r25, Y+1	; 0x01
 184:	93 70       	andi	r25, 0x03	; 3
 186:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADC_Val+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADC_Val>
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADC_Val>
 192:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADC_Val+0x1>
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	9c 93       	st	X, r25
 1b0:	8e 93       	st	-X, r24
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
				ADCSRA |= (1 << ADSC);				// start conversion
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
 1b2:	80 81       	ld	r24, Z
 1b4:	84 ff       	sbrs	r24, 4
 1b6:	e4 cf       	rjmp	.-56     	; 0x180 <__vector_4+0x56>
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;		// we only need first 10 bits
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
				}
			}
			else if(flag == 0){
 1ba:	89 2b       	or	r24, r25
 1bc:	61 f4       	brne	.+24     	; 0x1d6 <__vector_4+0xac>
				OCR1A = 0;					//reset
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	1c 92       	st	X, r1
 1c2:	1e 92       	st	-X, r1
				PORTB &= ~(1 << PORTB1);
 1c4:	29 98       	cbi	0x05, 1	; 5
				PORTB &= ~(1 << PORTB5);	//turn off OC1A and LED on
 1c6:	2d 98       	cbi	0x05, 5	; 5
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;		// we only need first 10 bits
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
				}
			}
			else if(flag == 0){
				OCR1A = 0;					//reset
 1ca:	a8 e8       	ldi	r26, 0x88	; 136
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
	_delay_ms(500);	
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
				ADCSRA |= (1 << ADSC);				// start conversion
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
					ADC_Val = ADC & 0x03FF;		// we only need first 10 bits
 1d2:	c8 e7       	ldi	r28, 0x78	; 120
 1d4:	d0 e0       	ldi	r29, 0x00	; 0

//ISR for PC1
ISR(PCINT1_vect){
	_delay_ms(500);	
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
 1d6:	31 9b       	sbis	0x06, 1	; 6
 1d8:	c3 cf       	rjmp	.-122    	; 0x160 <__vector_4+0x36>
				OCR1A = 0;					//reset
				PORTB &= ~(1 << PORTB1);
				PORTB &= ~(1 << PORTB5);	//turn off OC1A and LED on
			}
		}
		flag ^= 1;			//toggle
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	82 27       	eor	r24, r18
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
