
DA4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000586  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a02  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00009522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000022d  00000000  00000000  0000953a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
  92:	00 00       	nop
  94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
  96:	00 00       	nop
  98:	1d c0       	rjmp	.+58     	; 0xd4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	19 c0       	rjmp	.+50     	; 0xd4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	15 c0       	rjmp	.+42     	; 0xd4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	13 c0       	rjmp	.+38     	; 0xd4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	10 d0       	rcall	.+32     	; 0xf2 <main>
  d2:	5f c0       	rjmp	.+190    	; 0x192 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <ADC_init>:
		
	}
}

void ADC_init(void){
	DIDR0 = 0x1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = (1<<REFS0); //input is PC0
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA |=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 68       	ori	r24, 0x87	; 135
  ea:	80 83       	st	Z, r24
	ADCSRB = 0x0;
  ec:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  f0:	08 95       	ret

000000f2 <main>:
void timer_init();


int main(void){
	// initialize ADC
	ADC_init();
  f2:	f1 df       	rcall	.-30     	; 0xd6 <ADC_init>

	//set timer
	TCCR1B |=(1<<WGM12)|(1<<CS11); //CTC MODE prescaler = 8
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8a 60       	ori	r24, 0x0A	; 10
  fc:	80 83       	st	Z, r24

	// set DDR's
	DDRB = 0xFF; //all outputs
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;	//all input
 102:	17 b8       	out	0x07, r1	; 7
	PORTB = 0;	//start at 0
 104:	15 b8       	out	0x05, r1	; 5
	
	while(1){
		ADCSRA|=(1<<ADSC);
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
		while ((ADCSRA&(1<<ADIF))==0);	//wait until done converting
		ADCVal = ADC & 0x03FF;			//take only 10 bits
 10a:	c8 e7       	ldi	r28, 0x78	; 120
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = 10*ADCVal;				//scale for proper delay
 10e:	a8 e8       	ldi	r26, 0x88	; 136
 110:	b0 e0       	ldi	r27, 0x00	; 0
	DDRB = 0xFF; //all outputs
	DDRC = 0;	//all input
	PORTB = 0;	//start at 0
	
	while(1){
		ADCSRA|=(1<<ADSC);
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
		while ((ADCSRA&(1<<ADIF))==0);	//wait until done converting
 118:	80 81       	ld	r24, Z
 11a:	84 ff       	sbrs	r24, 4
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x26>
		ADCVal = ADC & 0x03FF;			//take only 10 bits
 11e:	88 81       	ld	r24, Y
 120:	99 81       	ldd	r25, Y+1	; 0x01
 122:	93 70       	andi	r25, 0x03	; 3
 124:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = 10*ADCVal;				//scale for proper delay
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 134:	9c 01       	movw	r18, r24
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	9c 93       	st	X, r25
 14e:	8e 93       	st	-X, r24
		
		//procedure for PB0
		PORTB |= (1<<PB0);
 150:	28 9a       	sbi	0x05, 0	; 5
		while(!(TIFR1 & (1<<OCF1A))); //wait until timer flag is set. repeat
 152:	b1 9b       	sbis	0x16, 1	; 22
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0x60>
		TIFR1 |= (1<<OCF1A);
 156:	b1 9a       	sbi	0x16, 1	; 22
		PORTB &= ~(1<<PB0);
 158:	28 98       	cbi	0x05, 0	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 15a:	b1 9b       	sbis	0x16, 1	; 22
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x68>
		TIFR1 |= (1<<OCF1A);
 15e:	b1 9a       	sbi	0x16, 1	; 22
		
		//procedure for PB1
		PORTB |= (1<<PB1);
 160:	29 9a       	sbi	0x05, 1	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 162:	b1 9b       	sbis	0x16, 1	; 22
 164:	fe cf       	rjmp	.-4      	; 0x162 <main+0x70>
		TIFR1 |= (1<<OCF1A);
 166:	b1 9a       	sbi	0x16, 1	; 22
		PORTB &= ~(1<<PB1);
 168:	29 98       	cbi	0x05, 1	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 16a:	b1 9b       	sbis	0x16, 1	; 22
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x78>
		TIFR1 |= (1<<OCF1A);
 16e:	b1 9a       	sbi	0x16, 1	; 22
		
		//procedure for PB2
		PORTB |= (1<<PB2);
 170:	2a 9a       	sbi	0x05, 2	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 172:	b1 9b       	sbis	0x16, 1	; 22
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0x80>
		TIFR1 |= (1<<OCF1A);
 176:	b1 9a       	sbi	0x16, 1	; 22
		PORTB &= ~(1<<PB2);
 178:	2a 98       	cbi	0x05, 2	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 17a:	b1 9b       	sbis	0x16, 1	; 22
 17c:	fe cf       	rjmp	.-4      	; 0x17a <main+0x88>
		TIFR1 |= (1<<OCF1A);
 17e:	b1 9a       	sbi	0x16, 1	; 22
		
		//procedure for PB3
		PORTB |= (1<<PB3);
 180:	2b 9a       	sbi	0x05, 3	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 182:	b1 9b       	sbis	0x16, 1	; 22
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x90>
		TIFR1 |= (1<<OCF1A);
 186:	b1 9a       	sbi	0x16, 1	; 22
		PORTB &= ~(1<<PB3);
 188:	2b 98       	cbi	0x05, 3	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 18a:	b1 9b       	sbis	0x16, 1	; 22
 18c:	fe cf       	rjmp	.-4      	; 0x18a <main+0x98>
		TIFR1 |= (1<<OCF1A);
 18e:	b1 9a       	sbi	0x16, 1	; 22
		
	}
 190:	c0 cf       	rjmp	.-128    	; 0x112 <main+0x20>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
