
DA2C_Part1_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000986  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d6  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000072c3  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  00008b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00008b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000092  00000000  00000000  00008bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
   a:	00 00       	nop
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
   e:	00 00       	nop
  10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
  12:	00 00       	nop
  14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
  22:	00 00       	nop
  24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4b c0       	rjmp	.+150    	; 0xc4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
  46:	00 00       	nop
  48:	3d c0       	rjmp	.+122    	; 0xc4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3b c0       	rjmp	.+118    	; 0xc4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
  52:	00 00       	nop
  54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
  56:	00 00       	nop
  58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c0       	rjmp	.+86     	; 0xc4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	29 c0       	rjmp	.+82     	; 0xc4 <__bad_interrupt>
  72:	00 00       	nop
  74:	27 c0       	rjmp	.+78     	; 0xc4 <__bad_interrupt>
  76:	00 00       	nop
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	23 c0       	rjmp	.+70     	; 0xc4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	21 c0       	rjmp	.+66     	; 0xc4 <__bad_interrupt>
  82:	00 00       	nop
  84:	1f c0       	rjmp	.+62     	; 0xc4 <__bad_interrupt>
  86:	00 00       	nop
  88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	19 c0       	rjmp	.+50     	; 0xc4 <__bad_interrupt>
  92:	00 00       	nop
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__bad_interrupt>
  96:	00 00       	nop
  98:	15 c0       	rjmp	.+42     	; 0xc4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	02 d0       	rcall	.+4      	; 0xc6 <main>
  c2:	25 c0       	rjmp	.+74     	; 0x10e <_exit>

000000c4 <__bad_interrupt>:
  c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <main>:
#include <avr/io.h>


int main(void)
{
	DDRC &= (0<<3);		// connect PORTC.3 to switch as input
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<3);	// enable pull-up
  ca:	43 9a       	sbi	0x08, 3	; 8
	DDRB = 0xFF;		// set PORTB.2 for output (LED)
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0;			// normal operation
  d0:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
  d2:	85 b5       	in	r24, 0x25	; 37
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	85 bd       	out	0x25, r24	; 37
					TCNT0 = 0x00;	// reset timer
				}
			}
		}
		else {
			PORTB = 0xFF;		// set LED off
  d8:	9f ef       	ldi	r25, 0xFF	; 255
	TCCR0A = 0;			// normal operation
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
	int count = 0;		// overflow counter
	
	while (1) {
		if(!(PINC & (1<<PINC3))) {	// check if pin C 3 is low
  da:	33 99       	sbic	0x06, 3	; 6
  dc:	16 c0       	rjmp	.+44     	; 0x10a <main+0x44>
			PORTB =0x00;		// set LED on
  de:	15 b8       	out	0x05, r1	; 5
			
			count = 0;				// reset counter
			TCNT0 = 0x00;			// reset timer
  e0:	16 bc       	out	0x26, r1	; 38
	
	while (1) {
		if(!(PINC & (1<<PINC3))) {	// check if pin C 3 is low
			PORTB =0x00;		// set LED on
			
			count = 0;				// reset counter
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	0d c0       	rjmp	.+26     	; 0x102 <main+0x3c>
			TCNT0 = 0x00;			// reset timer
			while(count < 82) {		// loop until 1.25 sec delay met
				if(TCNT0 == 0xFF){	// if timer overflows
  e8:	86 b5       	in	r24, 0x26	; 38
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	21 f0       	breq	.+8      	; 0xf6 <main+0x30>
		if(!(PINC & (1<<PINC3))) {	// check if pin C 3 is low
			PORTB =0x00;		// set LED on
			
			count = 0;				// reset counter
			TCNT0 = 0x00;			// reset timer
			while(count < 82) {		// loop until 1.25 sec delay met
  ee:	22 35       	cpi	r18, 0x52	; 82
  f0:	31 05       	cpc	r19, r1
  f2:	d4 f3       	brlt	.-12     	; 0xe8 <main+0x22>
  f4:	f2 cf       	rjmp	.-28     	; 0xda <main+0x14>
				if(TCNT0 == 0xFF){	// if timer overflows
					count++;		// increment counter
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
					TCNT0 = 0x00;	// reset timer
  fa:	16 bc       	out	0x26, r1	; 38
		if(!(PINC & (1<<PINC3))) {	// check if pin C 3 is low
			PORTB =0x00;		// set LED on
			
			count = 0;				// reset counter
			TCNT0 = 0x00;			// reset timer
			while(count < 82) {		// loop until 1.25 sec delay met
  fc:	22 35       	cpi	r18, 0x52	; 82
  fe:	31 05       	cpc	r19, r1
 100:	61 f3       	breq	.-40     	; 0xda <main+0x14>
				if(TCNT0 == 0xFF){	// if timer overflows
 102:	86 b5       	in	r24, 0x26	; 38
 104:	8f 3f       	cpi	r24, 0xFF	; 255
 106:	81 f7       	brne	.-32     	; 0xe8 <main+0x22>
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <main+0x30>
					TCNT0 = 0x00;	// reset timer
				}
			}
		}
		else {
			PORTB = 0xFF;		// set LED off
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	e6 cf       	rjmp	.-52     	; 0xda <main+0x14>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
