
DA2C_Part3_task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ed  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048c  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007be7  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00009683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000096e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002ac  00000000  00000000  000096fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	6d c0       	rjmp	.+218    	; 0x114 <__vector_14>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ea       	ldi	r30, 0xA6	; 166
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 30       	cpi	r26, 0x0A	; 10
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	02 d0       	rcall	.+4      	; 0xec <main>
  e8:	5c c0       	rjmp	.+184    	; 0x1a2 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB |= (1<<2)|(1<<5);	// Set all PORTB out
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	84 62       	ori	r24, 0x24	; 36
  f0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);		//turn off LED 5
  f2:	2d 9a       	sbi	0x05, 5	; 5
	TCCR0A |= (1<<WGM01);	//set ctc mode on OCRA
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	85 60       	ori	r24, 0x05	; 5
  fe:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);	//enable compare interrupts
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	OCR0A = cycleMatch;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	87 bd       	out	0x27, r24	; 39
	sei();					//enable interrupts
 110:	78 94       	sei
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x26>

00000114 <__vector_14>:
	
	while(1);				//infinite loop
	
}

ISR(TIMER0_COMPA_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	matchCount ++;
 126:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 12a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 134:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	if (flag == 1 && matchCount == dc60)//if the flag and the matchCount equals the cycle for 60%
 138:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <flag>
 13c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <flag+0x1>
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	31 05       	cpc	r19, r1
 144:	89 f4       	brne	.+34     	; 0x168 <__vector_14+0x54>
 146:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <dc60>
 14a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <dc60+0x1>
 14e:	82 17       	cp	r24, r18
 150:	93 07       	cpc	r25, r19
 152:	f1 f4       	brne	.+60     	; 0x190 <__vector_14+0x7c>
	{
		PORTB &= ~(1<<2);	//toggle LED
 154:	2a 98       	cbi	0x05, 2	; 5
		matchCount = 0;	//reset overflow counter
 156:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 15a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		flag = 0;		//set the flag for the second portion of the wave.
 15e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag+0x1>
 162:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
 166:	14 c0       	rjmp	.+40     	; 0x190 <__vector_14+0x7c>
	}
	else if (flag == 0 && matchCount == dc40)//if the flag and the matchCount equals the cycles for 40%
 168:	23 2b       	or	r18, r19
 16a:	91 f4       	brne	.+36     	; 0x190 <__vector_14+0x7c>
 16c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dc40>
 170:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dc40+0x1>
 174:	82 17       	cp	r24, r18
 176:	93 07       	cpc	r25, r19
 178:	59 f4       	brne	.+22     	; 0x190 <__vector_14+0x7c>
	{
		PORTB |= (1<<2);	//toggle LED
 17a:	2a 9a       	sbi	0x05, 2	; 5
		matchCount = 0;	//reset overflow counter
 17c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 180:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		flag = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <flag+0x1>
 18c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
	}
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
