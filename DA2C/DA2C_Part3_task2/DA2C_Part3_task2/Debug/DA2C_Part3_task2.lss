
DA2C_Part3_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000019e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f5  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004aa  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007bff  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  000096c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00009720  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002ac  00000000  00000000  00009738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	81 c0       	rjmp	.+258    	; 0x13c <__vector_14>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e9       	ldi	r30, 0x9E	; 158
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 30       	cpi	r26, 0x06	; 6
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	02 d0       	rcall	.+4      	; 0xec <main>
  e8:	58 c0       	rjmp	.+176    	; 0x19a <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <main>:
int cycleMatch = 255;


int main(void){
	//initialize registers
	DDRB |= (1<<2)|(1<<5);		//set portb 2 to output
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	84 62       	ori	r24, 0x24	; 36
  f0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<2)|(1<<5);		//set pb2 to high
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	84 62       	ori	r24, 0x24	; 36
  f6:	85 b9       	out	0x05, r24	; 5
	DDRC &= (0<<2);		//set ddrc to input
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);		//set portc2 to low
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	88 b9       	out	0x08, r24	; 8
	
	//Set modes
	TCCR0A |= (1<<WGM01);	//set ctc mode on OCRA
 100:	84 b5       	in	r24, 0x24	; 36
 102:	82 60       	ori	r24, 0x02	; 2
 104:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024
 106:	85 b5       	in	r24, 0x25	; 37
 108:	85 60       	ori	r24, 0x05	; 5
 10a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);	//enable compare interrupts
 10c:	ee e6       	ldi	r30, 0x6E	; 110
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
	OCR0A = cycleMatch;
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11a:	87 bd       	out	0x27, r24	; 39

	sei();			//enable interrupt
 11c:	78 94       	sei
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			flag = 1;		//if pressed then turn on led
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
	OCR0A = cycleMatch;

	sei();			//enable interrupt
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
 122:	32 99       	sbic	0x06, 2	; 6
 124:	05 c0       	rjmp	.+10     	; 0x130 <main+0x44>
		{
			flag = 1;		//if pressed then turn on led
 126:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag+0x1>
 12a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
 12e:	f9 cf       	rjmp	.-14     	; 0x122 <main+0x36>
		}
		else {
			PORTB |= (1<<2);		//if not pressed then keep led off
 130:	2a 9a       	sbi	0x05, 2	; 5
			flag = 0;
 132:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 136:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
 13a:	f3 cf       	rjmp	.-26     	; 0x122 <main+0x36>

0000013c <__vector_14>:
		}
	}
	return 0;
}

ISR(TIMER0_COMPA_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	
	int ovFlowCount = 0;
	int matchCheck = 0;
	int delayCount = 85;		//amount of overflows to reach desired delay

	if (flag == 1){
 14a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
 14e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	d9 f4       	brne	.+54     	; 0x18c <__vector_14+0x50>
		flag = 0;	//toggle flag
 156:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 15a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
		PORTB &= ~(1<<2);
 15e:	2a 98       	cbi	0x05, 2	; 5
		TCNT0 = 0;				//start counter at 0
 160:	16 bc       	out	0x26, r1	; 38
		while(matchCount <= delayCount ){
 162:	08 c0       	rjmp	.+16     	; 0x174 <__vector_14+0x38>
			matchCheck = TIFR0 & 0x02;	//variable to check if compare is met
			if (matchCheck == 0x02){
 164:	a9 9b       	sbis	0x15, 1	; 21
 166:	0a c0       	rjmp	.+20     	; 0x17c <__vector_14+0x40>
				matchCount ++;		//increase match count
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 16e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				TIFR0 |= (1<<OCF0A); //reset sreg flag
 172:	a9 9a       	sbi	0x15, 1	; 21

	if (flag == 1){
		flag = 0;	//toggle flag
		PORTB &= ~(1<<2);
		TCNT0 = 0;				//start counter at 0
		while(matchCount <= delayCount ){
 174:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 178:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 17c:	86 35       	cpi	r24, 0x56	; 86
 17e:	91 05       	cpc	r25, r1
 180:	8c f3       	brlt	.-30     	; 0x164 <__vector_14+0x28>
			if (matchCheck == 0x02){
				matchCount ++;		//increase match count
				TIFR0 |= (1<<OCF0A); //reset sreg flag
			}
		}
		matchCount = 0;		//reset match count
 182:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 186:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		PORTB |= (1<<2); //turn off LED
 18a:	2a 9a       	sbi	0x05, 2	; 5
		
	}
}
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
