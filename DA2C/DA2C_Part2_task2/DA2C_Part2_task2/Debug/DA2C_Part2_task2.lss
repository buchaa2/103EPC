
DA2C_Part2_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d4  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a2  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007beb  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  0000963f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000096cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002ac  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6c c0       	rjmp	.+216    	; 0x11a <__vector_16>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
  92:	00 00       	nop
  94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
  96:	00 00       	nop
  98:	1d c0       	rjmp	.+58     	; 0xd4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	19 c0       	rjmp	.+50     	; 0xd4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	15 c0       	rjmp	.+42     	; 0xd4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	13 c0       	rjmp	.+38     	; 0xd4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	02 d0       	rcall	.+4      	; 0xd6 <main>
  d2:	4f c0       	rjmp	.+158    	; 0x172 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <main>:
int flag = 0;

//FOR 1.333s Overflow count = 82
int main(void){
	//initialize registers
	DDRB |= (1<<2)|(1<<5);		//set portb 2 to output
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	84 62       	ori	r24, 0x24	; 36
  da:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<2)|(1<<5);		//set pinb2 to high
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	84 62       	ori	r24, 0x24	; 36
  e0:	85 b9       	out	0x05, r24	; 5
	DDRC &= (0<<2);		//set ddrc to input
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);		//set portc2 to low
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	88 b9       	out	0x08, r24	; 8
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	85 bd       	out	0x25, r24	; 37

	//int flag = 0;
	TIMSK0 |= (1<<TOIE0);		//enable timer interrupt
  f0:	ee e6       	ldi	r30, 0x6E	; 110
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
	sei();			//enable interrupt
  fa:	78 94       	sei
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			flag = 1;		//if pressed then turn on led
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
	//int flag = 0;
	TIMSK0 |= (1<<TOIE0);		//enable timer interrupt
	sei();			//enable interrupt
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
 100:	32 99       	sbic	0x06, 2	; 6
 102:	05 c0       	rjmp	.+10     	; 0x10e <main+0x38>
		{
			flag = 1;		//if pressed then turn on led
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <main+0x2a>
		}
		else {
			PORTB |= (1<<2);		//if not pressed then keep led off
 10e:	2a 9a       	sbi	0x05, 2	; 5
			flag = 0;		//keep flag off to keep from false positives
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 118:	f3 cf       	rjmp	.-26     	; 0x100 <main+0x2a>

0000011a <__vector_16>:
		}
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	int ovFlowCount = 0;
	int ovCheck = 0;
	int delayCount = 82;		//amount of overflows to reach desired delay

	if (flag == 1){
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	c1 f4       	brne	.+48     	; 0x164 <__vector_16+0x4a>
		PORTB &= ~(1<<2);		//turn LED on
 134:	2a 98       	cbi	0x05, 2	; 5
		TCNT0 = 0;				//start counter at 0
 136:	16 bc       	out	0x26, r1	; 38
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
	int ovFlowCount = 0;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0b c0       	rjmp	.+22     	; 0x154 <__vector_16+0x3a>
	if (flag == 1){
		PORTB &= ~(1<<2);		//turn LED on
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
 13e:	a8 99       	sbic	0x15, 0	; 21
 140:	04 c0       	rjmp	.+8      	; 0x14a <__vector_16+0x30>
	int delayCount = 82;		//amount of overflows to reach desired delay

	if (flag == 1){
		PORTB &= ~(1<<2);		//turn LED on
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
 142:	83 35       	cpi	r24, 0x53	; 83
 144:	91 05       	cpc	r25, r1
 146:	dc f3       	brlt	.-10     	; 0x13e <__vector_16+0x24>
 148:	08 c0       	rjmp	.+16     	; 0x15a <__vector_16+0x40>
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
				ovFlowCount ++;		//increase overflow count
 14a:	01 96       	adiw	r24, 0x01	; 1
				TIFR0 |= (1<<TOV0); //reset sreg flag
 14c:	a8 9a       	sbi	0x15, 0	; 21
	int delayCount = 82;		//amount of overflows to reach desired delay

	if (flag == 1){
		PORTB &= ~(1<<2);		//turn LED on
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
 14e:	83 35       	cpi	r24, 0x53	; 83
 150:	91 05       	cpc	r25, r1
 152:	19 f0       	breq	.+6      	; 0x15a <__vector_16+0x40>
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
 154:	a8 9b       	sbis	0x15, 0	; 21
 156:	f3 cf       	rjmp	.-26     	; 0x13e <__vector_16+0x24>
 158:	f8 cf       	rjmp	.-16     	; 0x14a <__vector_16+0x30>
				ovFlowCount ++;		//increase overflow count
				TIFR0 |= (1<<TOV0); //reset sreg flag
			}
		}
		ovFlowCount = 0;
		PORTB |= (1<<2);
 15a:	2a 9a       	sbi	0x05, 2	; 5
		flag = 0;
 15c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 160:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
